const express = require('express');
const ws = require('ws');
const path = require('path');
const app = express();
const PORT = process.env.PORT || 3000;

// Abilita CORS per lo streaming
app.use((req, res, next) => {
  res.header('Access-Control-Allow-Origin', '*');
  res.header('Access-Control-Allow-Methods', 'GET, POST, OPTIONS');
  res.header('Access-Control-Allow-Headers', 'Origin, X-Requested-With, Content-Type, Accept');
  next();
});

// Gestione route principale e admin
app.get('/', (req, res) => {
  console.log('[HTTP] Richiesta pagina, query:', req.query);
  
  // Se c'è il parametro admin, serve la pagina admin
  if (req.query.admin) {
    console.log('[HTTP] Servendo pagina admin');
    res.sendFile(path.join(__dirname, 'admin.html'));
    return;
  }
  
  // Altrimenti serve la pagina client
  console.log('[HTTP] Servendo pagina client');
  res.sendFile(path.join(__dirname, 'index.html'));
});

app.get('/admin.html', (req, res) => res.sendFile(path.join(__dirname, 'admin.html')));

// === WEBSOCKET: Streaming in background ===
const bgWss = new ws.Server({ noServer: true });
const adminWss = new ws.Server({ noServer: true });

const clients = new Map(); // room → ws

bgWss.on('connection', (ws, req) => {
  const url = new URL(req.url, `http://${req.headers.host}`);
  const room = url.searchParams.get('room') || 'unknown';

  clients.set(room, ws);

  ws.on('message', (data) => {
    if (typeof data === 'string' && data === 'ping') return;

    if (typeof data === 'string') {
      console.log('[SERVER] Ricevuto messaggio stringa da', room, data);
    } else {
      console.log('[SERVER] Ricevuto frame binario da', room, data?.byteLength || data?.size || '?', 'bytes');
    }

    const msg = JSON.stringify({ room, timestamp: Date.now() });

    // Invia a tutti gli admin
    adminWss.clients.forEach(client => {
      if (client.readyState === ws.OPEN) {
        client.send(msg);
        if (data instanceof Blob || data.byteLength) {
          client.send(data);
          console.log('[SERVER] Inviato frame a admin per', room);
        }
      }
    });
  });

  ws.on('close', () => {
    clients.delete(room);
    // Notifica admin che è offline
    adminWss.clients.forEach(c => {
      if (c.readyState === ws.OPEN) {
        c.send(JSON.stringify({ room, offline: true }));
      }
    });
  });
});

// Admin si connette qui
adminWss.on('connection', (ws) => {
  ws.send(JSON.stringify({ type: 'welcome' }));

  // Ricevi comando dall'admin e inoltra al client giusto
  ws.on('message', (msg) => {
    try {
      const cmd = JSON.parse(msg);
      if (cmd.type === 'camera' && cmd.room && cmd.mode) {
        const client = clients.get(cmd.room);
        if (client && client.readyState === ws.OPEN) {
          client.send(JSON.stringify({ type: 'camera', mode: cmd.mode }));
        }
      }
    } catch {}
  });
});

const server = app.listen(PORT, () => {
  console.log(`Server: http://localhost:${PORT}`);
});

server.on('upgrade', (req, socket, head) => {
  try {
    const url = new URL(req.url, `http://${req.headers.host}`);
    const pathname = url.pathname;

    console.log('[WS] Richiesta upgrade per:', pathname);

    if (pathname === '/bg-stream') {
      bgWss.handleUpgrade(req, socket, head, ws => {
        console.log('[WS] Client connesso a bg-stream');
        bgWss.emit('connection', ws, req);
      });
    } else if (pathname === '/bg-admin') {
      adminWss.handleUpgrade(req, socket, head, ws => {
        console.log('[WS] Admin connesso');
        adminWss.emit('connection', ws, req);
      });
    } else {
      socket.destroy();
    }
  } catch (err) {
    console.error('[WS] Errore upgrade:', err);
    socket.destroy();
  }
});